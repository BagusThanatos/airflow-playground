version: '3'
services:
  postgres_one:
    ports:
    - 5432:5432
    image: postgres:11
    environment:
      POSTGRES_USER: one
      POSTGRES_PASSWORD: one
      POSTGRES_DB: one
  postgres_two:
    ports:
    - 5433:5432
    image: postgres:11
    environment:
      POSTGRES_USER: two
      POSTGRES_PASSWORD: two
      POSTGRES_DB: two
  postgres_airflow:
    ports:
    - 5434:5432
    image: postgres:11
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
  redis_airflow:
    image: redis:latest
    ports:
    - 6379:6379
  x-airflow-common:
    &airflow-common
    image: 'apache/airflow:2.3.3-python3.8'
    # build: .
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: LocalExecutor # Using local executor for simplicity
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      # For backward compatibility, with Airflow <2.3
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres_airflow/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis_airflow:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__SECRET_KEY: key # Need to do this so secret_key is the same across webserver and scheduler. can't view logs through web ui otherwise
    volumes:
    - ./dags:/opt/airflow/dags
  airflow-init:
    <<: *airflow-common
    command: ["db", "init"]
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    depends_on:
      - postgres_airflow
      - redis_airflow
  airflow-webserver:
    <<: *airflow-common
    ports:
      - '5884:8080'
    command: webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully